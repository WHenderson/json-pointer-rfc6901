!function(t,n){"function"==typeof define&&define.amd?define([],n):t.JSON.pointer=n()}(this,function(){var t,n,e=function(t,n){function e(){this.constructor=t}for(var u in n)r.call(n,u)&&(t[u]=n[u]);return e.prototype=n.prototype,t.prototype=new e,t.__super__=n.prototype,t},r={}.hasOwnProperty;return n=function(t){function n(t){var e;e=n.__super__.constructor.call(this,t),this.message=e.message,this.stack=e.stack,this.name=this.constructor.name}return e(n,t),n}(Error),t=function(){function t(n,e,r){switch(arguments.length){case 3:return t.set(n,e,r);case 2:return t.get(n,e);case 1:return t.smartBind({object:n});default:return null}}return t.JsonPointerError=n,t.smartBind=function(n){var e,u,o,s,l,i,a,c,f,p;if(a=n.object,f=n.pointer,c=n.options,u=void 0!==a,s=null!=f,o=null!=c,"string"==typeof f&&(f=this.parse(f)),i=function(t){var n,e,r,u,o,s,l;return null==t&&(t={}),n={},n.hasOwnProp=null!=(e=t.hasOwnProp)?e:c.hasOwnProp,n.getProp=null!=(r=t.getProp)?r:c.getProp,n.setProp=null!=(u=t.setProp)?u:c.setProp,n.getNotFound=null!=(o=t.getNotFound)?o:c.getNotFound,n.setNotFound=null!=(s=t.setNotFound)?s:c.setNotFound,n.delNotFound=null!=(l=t.delNotFound)?l:c.delNotFound,n},e=void 0,u&&s&&o)e=function(n){switch(arguments.length){case 1:return t.set(a,f,n,c);case 0:return t.get(a,f,c);default:return null}},e.set=function(n,e){return a=t.set(a,f,n,i(e))},e.get=function(n){return t.get(a,f,i(n))},e.has=function(n){return t.has(a,f,i(n))},e.del=function(n){return a=t.del(a,f,i(n))};else if(u&&s)e=function(n){switch(arguments.length){case 1:return t.set(a,f,n);case 0:return t.get(a,f);default:return null}},e.set=function(n,e){return a=t.set(a,f,n,e)},e.get=function(n){return t.get(a,f,n)},e.has=function(n){return t.has(a,f,n)},e.del=function(n){return a=t.del(a,f,n)};else if(u&&o)e=function(n,e){switch(arguments.length){case 2:return t.set(a,n,e,c);case 1:return t.get(a,n,c);default:return null}},e.set=function(n,e,r){return a=t.set(a,n,e,i(r))},e.get=function(n,e){return t.get(a,n,i(e))},e.has=function(n,e){return t.has(a,n,i(e))},e.del=function(n,e){return a=t.del(a,n,i(e))};else if(s&&o)e=function(n,e){switch(arguments.length){case 2:return t.set(n,f,e,c);case 1:return t.get(n,f,c);default:return null}},e.set=function(n,e,r){return t.set(n,f,e,i(r))},e.get=function(n,e){return t.get(n,f,i(e))},e.has=function(n,e){return t.has(n,f,i(e))},e.del=function(n,e){return t.del(n,f,i(e))};else if(o)e=function(n,r,u){switch(arguments.length){case 3:return t.set(n,r,u,c);case 2:return t.get(n,r,c);case 1:return e.smartBind({object:n});default:return null}},e.set=function(n,e,r,u){return t.set(n,e,r,i(u))},e.get=function(n,e,r){return t.get(n,e,i(r))},e.has=function(n,e,r){return t.has(n,e,i(r))},e.del=function(n,e,r){return t.del(n,e,i(r))};else if(u)e=function(n,e){switch(arguments.length){case 2:return t.set(a,n,e);case 1:return t.get(a,n);default:return null}},e.set=function(n,e,r){return a=t.set(a,n,e,r)},e.get=function(n,e){return t.get(a,n,e)},e.has=function(n,e){return t.has(a,n,e)},e.del=function(n,e){return a=t.del(a,n,e)};else{if(!s)return this;e=function(n,e){switch(arguments.length){case 2:return t.set(n,f,e);case 1:return t.get(n,f);default:return null}},e.set=function(n,e,r){return t.set(n,f,e,r)},e.get=function(n,e){return t.get(n,f,e)},e.has=function(n,e){return t.has(n,f,e)},e.del=function(n,e){return t.del(n,f,e)}}e.smartBind=function(n){var e;return e={},{}.hasOwnProperty.call(n,"object")?e.object=n.object:u&&(e.object=a),{}.hasOwnProperty.call(n,"pointer")?e.pointer=n.pointer:s&&(e.pointer=f),{}.hasOwnProperty.call(n,"options")?e.options=i(n.options):u&&(e.options=c),t.smartBind(e)};for(l in t)r.call(t,l)&&(p=t[l],{}.hasOwnProperty.call(e,l)||(e[l]=p));return e},t.escape=function(t){return t.replace(/~/g,"~0").replace(/\//g,"~1")},t.unescape=function(t){return t.replace(/~1/g,"/").replace(/~0/g,"~")},t.parse=function(e){if(""===e)return[];if("/"!==e.charAt(0))throw new n("Invalid JSON pointer: "+e);return e.substring(1).split("/").map(t.unescape)},t.compile=function(n){return n.map(function(n){return"/"+t.escape(n)}).join("")},t.hasJsonProp=function(t,n){return Array.isArray(t)?"number"==typeof n&&n<t.length:"object"==typeof t?{}.hasOwnProperty.call(t,n):!1},t.hasOwnProp=function(t,n){return{}.hasOwnProperty.call(t,n)},t.hasProp=function(t,n){return n in t},t.getProp=function(t,n){return t[n]},t.setProp=function(t,n,e){return t[n]=e},t.getNotFound=function(t,n,e,r,u){return void 0},t.setNotFound=function(t,n,e,r,u){return r[u+1].match(/^(?:0|[1-9]\d*|-)$/)?t[n]=[]:t[n]={}},t.delNotFound=function(t,n,e,r,u){return void 0},t.errorNotFound=function(e,r,u,o,s){throw new n("Unable to find json path: "+t.compile(o.slice(0,s+1)))},t.set=function(n,e,r,u){var o,s,l,i,a,c,f,p,d,h,g,P;if("string"==typeof e&&(e=t.parse(e)),0===e.length)return r;for(s=null!=(a=null!=u?u.hasProp:void 0)?a:t.hasJsonProp,o=null!=(c=null!=u?u.getProp:void 0)?c:t.getProp,P=null!=(f=null!=u?u.setProp:void 0)?f:t.setProp,g=null!=(p=null!=u?u.setNotFound:void 0)?p:t.setNotFound,d=n,l=0,i=e.length;l!==i;){if(h=e[l],++l,"-"===h&&Array.isArray(n)?h=n.length:h.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(h=parseInt(h,10)),l===i){P(n,h,r);break}n=s(n,h)?o(n,h):g(n,h,d,e,l-1)}return d},t.get=function(n,e,r){var u,o,s,l,i,a,c,f,p,d;for("string"==typeof e&&(e=t.parse(e)),s=null!=(a=null!=r?r.hasProp:void 0)?a:t.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:t.getProp,u=null!=(f=null!=r?r.getNotFound:void 0)?f:t.getNotFound,p=n,l=0,i=e.length;l!==i;){if(d=e[l],++l,"-"===d&&Array.isArray(n)?d=n.length:d.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(d=parseInt(d,10)),!s(n,d))return u(n,d,p,e,l-1);n=o(n,d)}return n},t.del=function(n,e,r){var u,o,s,l,i,a,c,f,p,d;if("string"==typeof e&&(e=t.parse(e)),0===e.length)return void 0;for(s=null!=(a=null!=r?r.hasProp:void 0)?a:t.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:t.getProp,u=null!=(f=null!=r?r.delNotFound:void 0)?f:t.delNotFound,p=n,l=0,i=e.length;l!==i;){if(d=e[l],++l,"-"===d&&Array.isArray(n)?d=n.length:d.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(d=parseInt(d,10)),!s(n,d)){u(n,d,p,e,l-1);break}if(l===i){delete n[d];break}n=o(n,d)}return p},t.has=function(n,e,r){var u,o,s,l,i,a,c;for("string"==typeof e&&(e=t.parse(e)),o=null!=(i=null!=r?r.hasProp:void 0)?i:t.hasJsonProp,u=null!=(a=null!=r?r.getProp:void 0)?a:t.getProp,s=0,l=e.length;s!==l;){if(c=e[s],++s,"-"===c&&Array.isArray(n)?c=n.length:c.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(c=parseInt(c,10)),!o(n,c))return!1;n=u(n,c)}return!0},t}()});
//# sourceMappingURL=data:application/json;base64,