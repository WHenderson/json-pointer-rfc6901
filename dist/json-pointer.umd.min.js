!function(t,n){"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?module.exports=n():t.JSON.pointer=n()}(this,function(){var t,n,e=function(t,n){function e(){this.constructor=t}for(var u in n)r.call(n,u)&&(t[u]=n[u]);return e.prototype=n.prototype,t.prototype=new e,t.__super__=n.prototype,t},r={}.hasOwnProperty;return n=function(t){function n(t){var e;e=n.__super__.constructor.call(this,t),this.message=e.message,this.stack=e.stack,this.name=this.constructor.name}return e(n,t),n}(Error),t=function(){function t(n,e,r){switch(arguments.length){case 3:return t.set(n,e,r);case 2:return t.get(n,e);case 1:return t.smartBind({object:n});default:return null}}return t.JsonPointerError=n,t.smartBind=function(n){var e,u,o,s,l,i,a,c,f,p;if(a=n.object,f=n.pointer,c=n.options,u=void 0!==a,s=null!=f,o=null!=c,"string"==typeof f&&(f=this.parse(f)),i=function(t){var n,e,r,u,o,s,l;return null==t&&(t={}),n={},n.hasOwnProp=null!=(e=t.hasOwnProp)?e:c.hasOwnProp,n.getProp=null!=(r=t.getProp)?r:c.getProp,n.setProp=null!=(u=t.setProp)?u:c.setProp,n.getNotFound=null!=(o=t.getNotFound)?o:c.getNotFound,n.setNotFound=null!=(s=t.setNotFound)?s:c.setNotFound,n.delNotFound=null!=(l=t.delNotFound)?l:c.delNotFound,n},e=void 0,u&&s&&o)e=function(n){switch(arguments.length){case 1:return t.set(a,f,n,c);case 0:return t.get(a,f,c);default:return null}},e.set=function(n,e){return a=t.set(a,f,n,i(e))},e.get=function(n){return t.get(a,f,i(n))},e.has=function(n){return t.has(a,f,i(n))},e.del=function(n){return a=t.del(a,f,i(n))};else if(u&&s)e=function(n){switch(arguments.length){case 1:return t.set(a,f,n);case 0:return t.get(a,f);default:return null}},e.set=function(n,e){return a=t.set(a,f,n,e)},e.get=function(n){return t.get(a,f,n)},e.has=function(n){return t.has(a,f,n)},e.del=function(n){return a=t.del(a,f,n)};else if(u&&o)e=function(n,e){switch(arguments.length){case 2:return t.set(a,n,e,c);case 1:return t.get(a,n,c);default:return null}},e.set=function(n,e,r){return a=t.set(a,n,e,i(r))},e.get=function(n,e){return t.get(a,n,i(e))},e.has=function(n,e){return t.has(a,n,i(e))},e.del=function(n,e){return a=t.del(a,n,i(e))};else if(s&&o)e=function(n,e){switch(arguments.length){case 2:return t.set(n,f,e,c);case 1:return t.get(n,f,c);default:return null}},e.set=function(n,e,r){return t.set(n,f,e,i(r))},e.get=function(n,e){return t.get(n,f,i(e))},e.has=function(n,e){return t.has(n,f,i(e))},e.del=function(n,e){return t.del(n,f,i(e))};else if(o)e=function(n,r,u){switch(arguments.length){case 3:return t.set(n,r,u,c);case 2:return t.get(n,r,c);case 1:return e.smartBind({object:n});default:return null}},e.set=function(n,e,r,u){return t.set(n,e,r,i(u))},e.get=function(n,e,r){return t.get(n,e,i(r))},e.has=function(n,e,r){return t.has(n,e,i(r))},e.del=function(n,e,r){return t.del(n,e,i(r))};else if(u)e=function(n,e){switch(arguments.length){case 2:return t.set(a,n,e);case 1:return t.get(a,n);default:return null}},e.set=function(n,e,r){return a=t.set(a,n,e,r)},e.get=function(n,e){return t.get(a,n,e)},e.has=function(n,e){return t.has(a,n,e)},e.del=function(n,e){return a=t.del(a,n,e)};else{if(!s)return this;e=function(n,e){switch(arguments.length){case 2:return t.set(n,f,e);case 1:return t.get(n,f);default:return null}},e.set=function(n,e,r){return t.set(n,f,e,r)},e.get=function(n,e){return t.get(n,f,e)},e.has=function(n,e){return t.has(n,f,e)},e.del=function(n,e){return t.del(n,f,e)}}e.smartBind=function(n){var e;return e={},{}.hasOwnProperty.call(n,"object")?e.object=n.object:u&&(e.object=a),{}.hasOwnProperty.call(n,"pointer")?e.pointer=n.pointer:s&&(e.pointer=f),{}.hasOwnProperty.call(n,"options")?e.options=i(n.options):u&&(e.options=c),t.smartBind(e)};for(l in t)r.call(t,l)&&(p=t[l],{}.hasOwnProperty.call(e,l)||(e[l]=p));return e},t.escape=function(t){return t.replace(/~/g,"~0").replace(/\//g,"~1")},t.unescape=function(t){return t.replace(/~1/g,"/").replace(/~0/g,"~")},t.parse=function(e){if(""===e)return[];if("/"!==e.charAt(0))throw new n("Invalid JSON pointer: "+e);return e.substring(1).split("/").map(t.unescape)},t.compile=function(n){return n.map(function(n){return"/"+t.escape(n)}).join("")},t.hasJsonProp=function(t,n){return Array.isArray(t)?"number"==typeof n&&n<t.length:"object"==typeof t?{}.hasOwnProperty.call(t,n):!1},t.hasOwnProp=function(t,n){return{}.hasOwnProperty.call(t,n)},t.hasProp=function(t,n){return n in t},t.getProp=function(t,n){return t[n]},t.setProp=function(t,n,e){return t[n]=e},t.getNotFound=function(t,n,e,r,u){return void 0},t.setNotFound=function(t,n,e,r,u){return r[u+1].match(/^(?:0|[1-9]\d*|-)$/)?t[n]=[]:t[n]={}},t.delNotFound=function(t,n,e,r,u){return void 0},t.errorNotFound=function(e,r,u,o,s){throw new n("Unable to find json path: "+t.compile(o.slice(0,s+1)))},t.set=function(n,e,r,u){var o,s,l,i,a,c,f,p,d,h,g,P;if("string"==typeof e&&(e=t.parse(e)),0===e.length)return r;for(s=null!=(a=null!=u?u.hasProp:void 0)?a:t.hasJsonProp,o=null!=(c=null!=u?u.getProp:void 0)?c:t.getProp,P=null!=(f=null!=u?u.setProp:void 0)?f:t.setProp,g=null!=(p=null!=u?u.setNotFound:void 0)?p:t.setNotFound,d=n,l=0,i=e.length;l!==i;){if(h=e[l],++l,"-"===h&&Array.isArray(n)?h=n.length:h.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(h=parseInt(h,10)),l===i){P(n,h,r);break}n=s(n,h)?o(n,h):g(n,h,d,e,l-1)}return d},t.get=function(n,e,r){var u,o,s,l,i,a,c,f,p,d;for("string"==typeof e&&(e=t.parse(e)),s=null!=(a=null!=r?r.hasProp:void 0)?a:t.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:t.getProp,u=null!=(f=null!=r?r.getNotFound:void 0)?f:t.getNotFound,p=n,l=0,i=e.length;l!==i;){if(d=e[l],++l,"-"===d&&Array.isArray(n)?d=n.length:d.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(d=parseInt(d,10)),!s(n,d))return u(n,d,p,e,l-1);n=o(n,d)}return n},t.del=function(n,e,r){var u,o,s,l,i,a,c,f,p,d;if("string"==typeof e&&(e=t.parse(e)),0===e.length)return void 0;for(s=null!=(a=null!=r?r.hasProp:void 0)?a:t.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:t.getProp,u=null!=(f=null!=r?r.delNotFound:void 0)?f:t.delNotFound,p=n,l=0,i=e.length;l!==i;){if(d=e[l],++l,"-"===d&&Array.isArray(n)?d=n.length:d.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(d=parseInt(d,10)),!s(n,d)){u(n,d,p,e,l-1);break}if(l===i){delete n[d];break}n=o(n,d)}return p},t.has=function(n,e,r){var u,o,s,l,i,a,c;for("string"==typeof e&&(e=t.parse(e)),o=null!=(i=null!=r?r.hasProp:void 0)?i:t.hasJsonProp,u=null!=(a=null!=r?r.getProp:void 0)?a:t.getProp,s=0,l=e.length;s!==l;){if(c=e[s],++s,"-"===c&&Array.isArray(n)?c=n.length:c.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(c=parseInt(c,10)),!o(n,c))return!1;n=u(n,c)}return!0},t}()});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzb24tcG9pbnRlci51bWQuanMiLCJqc29uLXBvaW50ZXIuY29mZmVlIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsIkpTT04iLCJwb2ludGVyIiwidGhpcyIsIkpzb25Qb2ludGVyIiwiSnNvblBvaW50ZXJFcnJvciIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50IiwiY3RvciIsImNvbnN0cnVjdG9yIiwia2V5IiwiaGFzUHJvcDEiLCJjYWxsIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJzdXBlckNsYXNzIiwibWVzc2FnZSIsImJhc2UiLCJzdGFjayIsIm5hbWUiLCJFcnJvciIsIm9iamVjdCIsInZhbHVlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic2V0IiwiZ2V0Iiwic21hcnRCaW5kIiwiYXJnIiwiYXBpIiwiaGFzT2JqIiwiaGFzT3B0IiwiaGFzUHRyIiwibWVyZ2VPcHRpb25zIiwib2JqIiwib3B0IiwicHRyIiwidmFsIiwib3B0aW9ucyIsInBhcnNlIiwib3ZlcnJpZGUiLCJvIiwicmVmIiwicmVmMSIsInJlZjIiLCJyZWYzIiwicmVmNCIsInJlZjUiLCJoYXNPd25Qcm9wIiwiZ2V0UHJvcCIsInNldFByb3AiLCJnZXROb3RGb3VuZCIsInNldE5vdEZvdW5kIiwiZGVsTm90Rm91bmQiLCJoYXMiLCJkZWwiLCJlc2NhcGUiLCJzZWdtZW50IiwicmVwbGFjZSIsInVuZXNjYXBlIiwic3RyIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwic3BsaXQiLCJtYXAiLCJjb21waWxlIiwic2VnbWVudHMiLCJqb2luIiwiaGFzSnNvblByb3AiLCJBcnJheSIsImlzQXJyYXkiLCJoYXNQcm9wIiwiaVNlZ21lbnQiLCJtYXRjaCIsImVycm9yTm90Rm91bmQiLCJzbGljZSIsImxlbiIsInBhcnNlSW50Il0sIm1hcHBpbmdzIjoiQ0FBRSxTQUFTQSxFQUFNQyxHQUNPLGtC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RCxLQUNSQSxFQUFVRSxFQUFZcUMsTUFBTXZDLElBRTlCdUUsRUFBQSxPQUFBN0IsRUFBQSxNQUFBSixFQUFBQSxFQUFBaUMsUUFBQSxRQUFBN0IsRUFBNkJ4QyxFQUFZa0UsWUFDekNuQixFQUFBLE9BQUFOLEVBQUEsTUFBQUwsRUFBQUEsRUFBQVcsUUFBQSxRQUFBTixFQUE2QnpDLEVBQVkrQyxRQUV6Q3VCLEVBQVcsRUFDWEksRUFBTTVFLEVBQVF3QixPQUNSZ0QsSUFBWUksR0FBbEIsQ0FTRSxHQVJBbkIsRUFBVXpELEVBQVF3RSxLQUNoQkEsRUFFWSxNQUFYZixHQUFtQlksTUFBTUMsUUFBUXBDLEdBQ2xDdUIsRUFBVXZCLEVBQUlWLE9BQ1JpQyxFQUFRZ0IsTUFBTSxxQkFBd0JKLE1BQU1DLFFBQVFwQyxLQUMxRHVCLEVBQVVvQixTQUFTcEIsRUFBUyxNQUV2QmMsRUFBUXJDLEVBQUt1QixHQUNsQixPQUFPLENBRVR2QixHQUFNZSxFQUFRZixFQUFLdUIsR0FFckIsT0FBTyxHRGlMRnZEIiwiZmlsZSI6Impzb24tcG9pbnRlci51bWQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJjbGFzcyBKc29uUG9pbnRlckVycm9yIGV4dGVuZHMgRXJyb3JcclxuICBjb25zdHJ1Y3RvcjogKG1lc3NhZ2UpIC0+XHJcbiAgICBiYXNlID0gc3VwZXIobWVzc2FnZSlcclxuXHJcbiAgICBAbWVzc2FnZSA9IGJhc2UubWVzc2FnZVxyXG4gICAgQHN0YWNrID0gYmFzZS5zdGFja1xyXG4gICAgQG5hbWUgPSBAY29uc3RydWN0b3IubmFtZVxyXG5cclxuY2xhc3MgSnNvblBvaW50ZXJcclxuICBASnNvblBvaW50ZXJFcnJvcjogSnNvblBvaW50ZXJFcnJvclxyXG5cclxuICAjIyNcclxuICAjIENvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBjaG9vc2luZyBiZXR3ZWVuIGAuc21hcnRCaW5kYCwgYC5nZXRgLCBhbmQgYC5zZXRgLCBkZXBlbmRpbmcgb24gdGhlIG51bWJlciBvZiBhcmd1bWVudHMuXHJcbiAgI1xyXG4gICMgQHBhcmFtIHsqfSBvYmplY3RcclxuICAjIEBwYXJhbSB7c3RyaW5nfSBwb2ludGVyXHJcbiAgIyBAcGFyYW0geyp9IHZhbHVlXHJcbiAgIyBAcmV0dXJucyB7Kn0gZXZhbHVhdGlvbiBvZiB0aGUgcHJveGllZCBtZXRob2RcclxuICAjIyNcclxuICBjb25zdHJ1Y3RvcjogKG9iamVjdCwgcG9pbnRlciwgdmFsdWUpIC0+XHJcbiAgICByZXR1cm4gc3dpdGNoIGFyZ3VtZW50cy5sZW5ndGhcclxuICAgICAgd2hlbiAzIHRoZW4gSnNvblBvaW50ZXIuc2V0KG9iamVjdCwgcG9pbnRlciwgdmFsdWUpXHJcbiAgICAgIHdoZW4gMiB0aGVuIEpzb25Qb2ludGVyLmdldChvYmplY3QsIHBvaW50ZXIpXHJcbiAgICAgIHdoZW4gMSB0aGVuIEpzb25Qb2ludGVyLnNtYXJ0QmluZCh7IG9iamVjdDogb2JqZWN0IH0pXHJcbiAgICAgIGVsc2UgbnVsbFxyXG5cclxuICAjIyNcclxuICAjIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYXBpLCB3aXRoIGAuLy5nZXQvLmhhcy8uc2V0Ly5kZWwvLnNtYXJ0QmluZGAgbWV0aG9kIHNpZ25hdHVyZXMgYWRqdXN0ZWQuXHJcbiAgIyBUaGUgc21hcnRCaW5kIG1ldGhvZCBpcyBjdW11bGF0aXZlLCBtZWFuaW5nIHRoYXQgYC5zbWFydEJpbmQoeyBvYmplY3Q6IHh9KS5zbWFydEJpbmQoeyBwb2ludGVyOiB5IH0pYCB3aWxsIGJlaGF2ZSBhcyBleHBlY3RlZC5cclxuICAjXHJcbiAgIyBAcGFyYW0ge09iamVjdH0gYmluZGluZ3NcclxuICAjIEBwYXJhbSB7Kn0gYmluZGluZ3Mub2JqZWN0XHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gYmluZGluZ3MucG9pbnRlclxyXG4gICMgQHBhcmFtIHtPYmplY3R9IGJpbmRpbmdzLm9wdGlvbnNcclxuICAjIEByZXR1cm5zIHtKc29uUG9pbnRlcn1cclxuICAjIyNcclxuICBAc21hcnRCaW5kOiAoeyBvYmplY3Q6IG9iaiwgcG9pbnRlcjogcHRyLCBvcHRpb25zOiBvcHQgfSkgLT5cclxuICAgICMgV2hhdCBhcmUgYmluZGluZz9cclxuICAgIGhhc09iaiA9IG9iaiAhPSB1bmRlZmluZWRcclxuICAgIGhhc1B0ciA9IHB0cj9cclxuICAgIGhhc09wdCA9IG9wdD9cclxuXHJcbiAgICAjIExldHMgbm90IHBhcnNlIHRoaXMgZXZlcnkgdGltZSFcclxuICAgIGlmIHR5cGVvZiBwdHIgPT0gJ3N0cmluZydcclxuICAgICAgcHRyID0gQHBhcnNlKHB0cilcclxuXHJcbiAgICAjIGRlZmF1bHQgb3B0aW9ucyBoYXZlIGNoYW5nZWRcclxuICAgIG1lcmdlT3B0aW9ucyA9IChvdmVycmlkZSA9IHt9KSAtPlxyXG4gICAgICBvID0ge31cclxuXHJcbiAgICAgIG8uaGFzT3duUHJvcCA9IG92ZXJyaWRlLmhhc093blByb3AgPyBvcHQuaGFzT3duUHJvcFxyXG4gICAgICBvLmdldFByb3AgPSBvdmVycmlkZS5nZXRQcm9wID8gb3B0LmdldFByb3BcclxuICAgICAgby5zZXRQcm9wID0gb3ZlcnJpZGUuc2V0UHJvcCA/IG9wdC5zZXRQcm9wXHJcbiAgICAgIG8uZ2V0Tm90Rm91bmQgPSBvdmVycmlkZS5nZXROb3RGb3VuZCA/IG9wdC5nZXROb3RGb3VuZFxyXG4gICAgICBvLnNldE5vdEZvdW5kID0gb3ZlcnJpZGUuc2V0Tm90Rm91bmQgPyBvcHQuc2V0Tm90Rm91bmRcclxuICAgICAgby5kZWxOb3RGb3VuZCA9IG92ZXJyaWRlLmRlbE5vdEZvdW5kID8gb3B0LmRlbE5vdEZvdW5kXHJcblxyXG4gICAgICByZXR1cm4gb1xyXG5cclxuICAgIGFwaSA9IHVuZGVmaW5lZFxyXG5cclxuICAgICMgRXZlcnkgY29tYmluYXRpb24gb2YgYmluZGluZ3NcclxuICAgIGlmIGhhc09iaiBhbmQgaGFzUHRyIGFuZCBoYXNPcHRcclxuICAgICAgYXBpID0gKHZhbHVlKSAtPlxyXG4gICAgICAgIHJldHVybiBzd2l0Y2ggYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgICAgd2hlbiAxIHRoZW4gSnNvblBvaW50ZXIuc2V0KG9iaiwgcHRyLCB2YWx1ZSwgb3B0KVxyXG4gICAgICAgICAgd2hlbiAwIHRoZW4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBvcHQpXHJcbiAgICAgICAgICBlbHNlIG51bGxcclxuXHJcbiAgICAgIGFwaS5zZXQgPSAodmFsdWUsIG92ZXJyaWRlKSAtPiBvYmogPSBKc29uUG9pbnRlci5zZXQob2JqLCBwdHIsIHZhbHVlLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgICBhcGkuZ2V0ID0gKG92ZXJyaWRlKSAtPiBKc29uUG9pbnRlci5nZXQob2JqLCBwdHIsIG1lcmdlT3B0aW9ucyhvdmVycmlkZSkpXHJcbiAgICAgIGFwaS5oYXMgPSAob3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLmhhcyhvYmosIHB0ciwgbWVyZ2VPcHRpb25zKG92ZXJyaWRlKSlcclxuICAgICAgYXBpLmRlbCA9IChvdmVycmlkZSkgLT4gb2JqID0gSnNvblBvaW50ZXIuZGVsKG9iaiwgcHRyLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgZWxzZSBpZiBoYXNPYmogYW5kIGhhc1B0clxyXG4gICAgICBhcGkgPSAodmFsdWUpIC0+XHJcbiAgICAgICAgcmV0dXJuIHN3aXRjaCBhcmd1bWVudHMubGVuZ3RoXHJcbiAgICAgICAgICB3aGVuIDEgdGhlbiBKc29uUG9pbnRlci5zZXQob2JqLCBwdHIsIHZhbHVlKVxyXG4gICAgICAgICAgd2hlbiAwIHRoZW4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyKVxyXG4gICAgICAgICAgZWxzZSBudWxsXHJcblxyXG4gICAgICBhcGkuc2V0ID0gKHZhbHVlLCBvdmVycmlkZSkgLT4gb2JqID0gSnNvblBvaW50ZXIuc2V0KG9iaiwgcHRyLCB2YWx1ZSwgb3ZlcnJpZGUpXHJcbiAgICAgIGFwaS5nZXQgPSAob3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLmdldChvYmosIHB0ciwgb3ZlcnJpZGUpXHJcbiAgICAgIGFwaS5oYXMgPSAob3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLmhhcyhvYmosIHB0ciwgb3ZlcnJpZGUpXHJcbiAgICAgIGFwaS5kZWwgPSAob3ZlcnJpZGUpIC0+IG9iaiA9IEpzb25Qb2ludGVyLmRlbChvYmosIHB0ciwgb3ZlcnJpZGUpXHJcbiAgICBlbHNlIGlmIGhhc09iaiBhbmQgaGFzT3B0XHJcbiAgICAgIGFwaSA9IChwdHIsIHZhbHVlKSAtPlxyXG4gICAgICAgIHJldHVybiBzd2l0Y2ggYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgICAgd2hlbiAyIHRoZW4gSnNvblBvaW50ZXIuc2V0KG9iaiwgcHRyLCB2YWx1ZSwgb3B0KVxyXG4gICAgICAgICAgd2hlbiAxIHRoZW4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBvcHQpXHJcbiAgICAgICAgICBlbHNlIG51bGxcclxuXHJcbiAgICAgIGFwaS5zZXQgPSAocHRyLCB2YWx1ZSwgb3ZlcnJpZGUpIC0+IG9iaiA9IEpzb25Qb2ludGVyLnNldChvYmosIHB0ciwgdmFsdWUsIG1lcmdlT3B0aW9ucyhvdmVycmlkZSkpXHJcbiAgICAgIGFwaS5nZXQgPSAocHRyLCBvdmVycmlkZSkgLT4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgICBhcGkuaGFzID0gKHB0ciwgb3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLmhhcyhvYmosIHB0ciwgbWVyZ2VPcHRpb25zKG92ZXJyaWRlKSlcclxuICAgICAgYXBpLmRlbCA9IChwdHIsIG92ZXJyaWRlKSAtPiBvYmogPSBKc29uUG9pbnRlci5kZWwob2JqLCBwdHIsIG1lcmdlT3B0aW9ucyhvdmVycmlkZSkpXHJcbiAgICBlbHNlIGlmIGhhc1B0ciBhbmQgaGFzT3B0XHJcbiAgICAgIGFwaSA9IChvYmosIHZhbHVlKSAtPlxyXG4gICAgICAgIHJldHVybiBzd2l0Y2ggYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgICAgd2hlbiAyIHRoZW4gSnNvblBvaW50ZXIuc2V0KG9iaiwgcHRyLCB2YWx1ZSwgb3B0KVxyXG4gICAgICAgICAgd2hlbiAxIHRoZW4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBvcHQpXHJcbiAgICAgICAgICBlbHNlIG51bGxcclxuXHJcbiAgICAgIGFwaS5zZXQgPSAob2JqLCB2YWx1ZSwgb3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLnNldChvYmosIHB0ciwgdmFsdWUsIG1lcmdlT3B0aW9ucyhvdmVycmlkZSkpXHJcbiAgICAgIGFwaS5nZXQgPSAob2JqLCBvdmVycmlkZSkgLT4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgICBhcGkuaGFzID0gKG9iaiwgb3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLmhhcyhvYmosIHB0ciwgbWVyZ2VPcHRpb25zKG92ZXJyaWRlKSlcclxuICAgICAgYXBpLmRlbCA9IChvYmosIG92ZXJyaWRlKSAtPiBKc29uUG9pbnRlci5kZWwob2JqLCBwdHIsIG1lcmdlT3B0aW9ucyhvdmVycmlkZSkpXHJcbiAgICBlbHNlIGlmIGhhc09wdFxyXG4gICAgICBhcGkgPSAob2JqLCBwdHIsIHZhbHVlKSAtPlxyXG4gICAgICAgIHJldHVybiBzd2l0Y2ggYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgICAgd2hlbiAzIHRoZW4gSnNvblBvaW50ZXIuc2V0KG9iaiwgcHRyLCB2YWx1ZSwgb3B0KVxyXG4gICAgICAgICAgd2hlbiAyIHRoZW4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBvcHQpXHJcbiAgICAgICAgICB3aGVuIDEgdGhlbiBhcGkuc21hcnRCaW5kKHsgb2JqZWN0OiBvYmogfSlcclxuICAgICAgICAgIGVsc2UgbnVsbFxyXG5cclxuICAgICAgYXBpLnNldCA9IChvYmosIHB0ciwgdmFsdWUsIG92ZXJyaWRlKSAtPiBKc29uUG9pbnRlci5zZXQob2JqLCBwdHIsIHZhbHVlLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgICBhcGkuZ2V0ID0gKG9iaiwgcHRyLCBvdmVycmlkZSkgLT4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgICBhcGkuaGFzID0gKG9iaiwgcHRyLCBvdmVycmlkZSkgLT4gSnNvblBvaW50ZXIuaGFzKG9iaiwgcHRyLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgICBhcGkuZGVsID0gKG9iaiwgcHRyLCBvdmVycmlkZSkgLT4gSnNvblBvaW50ZXIuZGVsKG9iaiwgcHRyLCBtZXJnZU9wdGlvbnMob3ZlcnJpZGUpKVxyXG4gICAgZWxzZSBpZiBoYXNPYmpcclxuICAgICAgYXBpID0gKHB0ciwgdmFsdWUpIC0+XHJcbiAgICAgICAgcmV0dXJuIHN3aXRjaCBhcmd1bWVudHMubGVuZ3RoXHJcbiAgICAgICAgICB3aGVuIDIgdGhlbiBKc29uUG9pbnRlci5zZXQob2JqLCBwdHIsIHZhbHVlKVxyXG4gICAgICAgICAgd2hlbiAxIHRoZW4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyKVxyXG4gICAgICAgICAgZWxzZSBudWxsXHJcblxyXG4gICAgICBhcGkuc2V0ID0gKHB0ciwgdmFsdWUsIG92ZXJyaWRlKSAtPiBvYmogPSBKc29uUG9pbnRlci5zZXQob2JqLCBwdHIsIHZhbHVlLCBvdmVycmlkZSlcclxuICAgICAgYXBpLmdldCA9IChwdHIsIG92ZXJyaWRlKSAtPiBKc29uUG9pbnRlci5nZXQob2JqLCBwdHIsIG92ZXJyaWRlKVxyXG4gICAgICBhcGkuaGFzID0gKHB0ciwgb3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLmhhcyhvYmosIHB0ciwgb3ZlcnJpZGUpXHJcbiAgICAgIGFwaS5kZWwgPSAocHRyLCBvdmVycmlkZSkgLT4gb2JqID0gSnNvblBvaW50ZXIuZGVsKG9iaiwgcHRyLCBvdmVycmlkZSlcclxuICAgIGVsc2UgaWYgaGFzUHRyXHJcbiAgICAgIGFwaSA9IChvYmosIHZhbHVlKSAtPlxyXG4gICAgICAgIHJldHVybiBzd2l0Y2ggYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgICAgd2hlbiAyIHRoZW4gSnNvblBvaW50ZXIuc2V0KG9iaiwgcHRyLCB2YWx1ZSlcclxuICAgICAgICAgIHdoZW4gMSB0aGVuIEpzb25Qb2ludGVyLmdldChvYmosIHB0cilcclxuICAgICAgICAgIGVsc2UgbnVsbFxyXG5cclxuICAgICAgYXBpLnNldCA9IChvYmosIHZhbHVlLCBvdmVycmlkZSkgLT4gSnNvblBvaW50ZXIuc2V0KG9iaiwgcHRyLCB2YWx1ZSwgb3ZlcnJpZGUpXHJcbiAgICAgIGFwaS5nZXQgPSAob2JqLCBvdmVycmlkZSkgLT4gSnNvblBvaW50ZXIuZ2V0KG9iaiwgcHRyLCBvdmVycmlkZSlcclxuICAgICAgYXBpLmhhcyA9IChvYmosIG92ZXJyaWRlKSAtPiBKc29uUG9pbnRlci5oYXMob2JqLCBwdHIsIG92ZXJyaWRlKVxyXG4gICAgICBhcGkuZGVsID0gKG9iaiwgb3ZlcnJpZGUpIC0+IEpzb25Qb2ludGVyLmRlbChvYmosIHB0ciwgb3ZlcnJpZGUpXHJcbiAgICBlbHNlXHJcbiAgICAgIHJldHVybiBAXHJcblxyXG4gICAgIyBzbWFydEJpbmQgaGFzIG5ldyBkZWZhdWx0c1xyXG4gICAgYXBpLnNtYXJ0QmluZCA9IChvdmVycmlkZSkgLT5cclxuICAgICAgbyA9IHt9XHJcblxyXG4gICAgICBpZiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG92ZXJyaWRlLCAnb2JqZWN0JylcclxuICAgICAgICBvLm9iamVjdCA9IG92ZXJyaWRlLm9iamVjdFxyXG4gICAgICBlbHNlIGlmIGhhc09ialxyXG4gICAgICAgIG8ub2JqZWN0ID0gb2JqXHJcblxyXG4gICAgICBpZiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG92ZXJyaWRlLCAncG9pbnRlcicpXHJcbiAgICAgICAgby5wb2ludGVyID0gb3ZlcnJpZGUucG9pbnRlclxyXG4gICAgICBlbHNlIGlmIGhhc1B0clxyXG4gICAgICAgIG8ucG9pbnRlciA9IHB0clxyXG5cclxuICAgICAgaWYge30uaGFzT3duUHJvcGVydHkuY2FsbChvdmVycmlkZSwgJ29wdGlvbnMnKVxyXG4gICAgICAgIG8ub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhvdmVycmlkZS5vcHRpb25zKVxyXG4gICAgICBlbHNlIGlmIGhhc09ialxyXG4gICAgICAgIG8ub3B0aW9ucyA9IG9wdFxyXG5cclxuICAgICAgcmV0dXJuIEpzb25Qb2ludGVyLnNtYXJ0QmluZChvKVxyXG5cclxuICAgICMgY29weSB0aGUgcmVtYWluaW5nIG1ldGhvZHMgd2hpY2ggZG8gbm90IG5lZWQgYmluZGluZ1xyXG4gICAgZm9yIG93biBrZXksIHZhbCBvZiBKc29uUG9pbnRlclxyXG4gICAgICBpZiBub3Qge30uaGFzT3duUHJvcGVydHkuY2FsbChhcGksIGtleSlcclxuICAgICAgICBhcGlba2V5XSA9IHZhbFxyXG5cclxuICAgICMgZmluYWwgcmVzdWx0XHJcbiAgICByZXR1cm4gYXBpXHJcblxyXG4gICMjI1xyXG4gICMgRXNjYXBlcyB0aGUgZ2l2ZW4gcGF0aCBzZWdtZW50IGFzIGRlc2NyaWJlZCBieSBSRkM2OTAxLlxyXG4gICNcclxuICAjIE5vdGFibHksIGAnfidgJ3MgYXJlIHJlcGxhY2VkIHdpdGggYCd+MCdgIGFuZCBgJy8nYCdzIGFyZSByZXBsYWNlZCB3aXRoIGAnfjEnYC5cclxuICAjXHJcbiAgIyBAcGFyYW0ge3N0cmluZ30gc2VnbWVudFxyXG4gICMgQHJldHVybnMge3N0cmluZ31cclxuICAjIyNcclxuICBAZXNjYXBlOiAoc2VnbWVudCkgLT5cclxuICAgIHNlZ21lbnQucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cXC8vZywgJ34xJylcclxuXHJcbiAgIyMjXHJcbiAgIyBVbi1Fc2NhcGVzIHRoZSBnaXZlbiBwYXRoIHNlZ21lbnQsIHJldmVyc2luZyB0aGUgYWN0aW9ucyBvZiBgLmVzY2FwZWAuXHJcbiAgI1xyXG4gICMgTm90YWJseSwgYCd+MSdgJ3MgYXJlIHJlcGxhY2VkIHdpdGggYCcvJ2AgYW5kIGAnfjAnYCdzIGFyZSByZXBsYWNlZCB3aXRoIGAnfidgLlxyXG4gICNcclxuICAjIEBwYXJhbSB7c3RyaW5nfSBzZWdtZW50XHJcbiAgIyBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICMjI1xyXG4gIEB1bmVzY2FwZTogKHNlZ21lbnQpIC0+XHJcbiAgICBzZWdtZW50LnJlcGxhY2UoL34xL2csICcvJykucmVwbGFjZSgvfjAvZywgJ34nKVxyXG5cclxuICAjIyNcclxuICAjIFBhcnNlcyBhIGpzb24tcG9pbnRlciwgYXMgZGVzcmliZWQgYnkgUkZDOTAxLCBpbnRvIGFuIGFycmF5IG9mIHBhdGggc2VnbWVudHMuXHJcbiAgI1xyXG4gICMgQHRocm93cyB7SnNvblBvaW50ZXJFcnJvcn0gZm9yIGludmFsaWQganNvbi1wb2ludGVycy5cclxuICAjXHJcbiAgIyBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAgIyBAcmV0dXJucyB7c3RyaW5nW119XHJcbiAgIyMjXHJcbiAgQHBhcnNlOiAoc3RyKSAtPlxyXG4gICAgaWYgc3RyID09ICcnXHJcbiAgICAgIHJldHVybiBbXVxyXG5cclxuICAgIGlmIHN0ci5jaGFyQXQoMCkgIT0gJy8nXHJcbiAgICAgIHRocm93IG5ldyBKc29uUG9pbnRlckVycm9yKFwiSW52YWxpZCBKU09OIHBvaW50ZXI6ICN7c3RyfVwiKVxyXG5cclxuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDEpLnNwbGl0KCcvJykubWFwKEpzb25Qb2ludGVyLnVuZXNjYXBlKVxyXG5cclxuICAjIyNcclxuICAjIENvbnZlcnRzIGFuIGFycmF5IG9mIHBhdGggc2VnbWVudHMgaW50byBhIGpzb24gcGF0aC5cclxuICAjIFRoaXMgbWV0aG9kIGlzIHRoZSByZXZlcnNlIG9mIGAucGFyc2VgLlxyXG4gICNcclxuICAjIEBwYXJhbSB7c3RyaW5nW119IHNlZ21lbnRzXHJcbiAgIyBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICMjI1xyXG4gIEBjb21waWxlOiAoc2VnbWVudHMpIC0+XHJcbiAgICBzZWdtZW50cy5tYXAoKHNlZ21lbnQpIC0+ICcvJyArIEpzb25Qb2ludGVyLmVzY2FwZShzZWdtZW50KSkuam9pbignJylcclxuXHJcbiAgIyMjXHJcbiAgIyBDYWxsYmFjayB1c2VkIHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgY29udGFpbnMgYSBnaXZlbiBwcm9wZXJ0eS5cclxuICAjXHJcbiAgIyBAY2FsbGJhY2sgaGFzUHJvcFxyXG4gICMgQHBhcmFtIHsqfSBvYmpcclxuICAjIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IGtleVxyXG4gICMgQHJldHVybnMge0Jvb2xlYW59XHJcbiAgIyMjXHJcblxyXG4gICMjI1xyXG4gICMgUmV0dXJucyB0cnVlIGlmZiBgb2JqYCBjb250YWlucyBga2V5YCBhbmQgYG9iamAgaXMgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdC5cclxuICAjIElnbm9yZXMgdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICAjXHJcbiAgIyBEZWZhdWx0IHZhbHVlIGZvciBgb3B0aW9ucy5oYXNQcm9wYC5cclxuICAjXHJcbiAgIyBAcGFyYW0geyp9IG9ialxyXG4gICMgQHBhcmFtIHtzdHJpbmd8aW50ZWdlcn0ga2V5XHJcbiAgIyBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAjIyNcclxuICBAaGFzSnNvblByb3A6IChvYmosIGtleSkgLT5cclxuICAgIGlmIEFycmF5LmlzQXJyYXkob2JqKVxyXG4gICAgICByZXR1cm4gKHR5cGVvZiBrZXkgPT0gJ251bWJlcicpIGFuZCAoa2V5IDwgb2JqLmxlbmd0aClcclxuICAgIGVsc2UgaWYgdHlwZW9mIG9iaiA9PSAnb2JqZWN0J1xyXG4gICAgICByZXR1cm4ge30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcclxuICAgIGVsc2VcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcblxyXG4gICMjI1xyXG4gICMgUmV0dXJucyB0cnVlIGlmZiBgb2JqYCBjb250YWlucyBga2V5YCwgZGlzcmVnYXJkaW5nIHRoZSBwcm90b3R5cGUgY2hhaW4uXHJcbiAgI1xyXG4gICMgQHBhcmFtIHsqfSBvYmpcclxuICAjIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IGtleVxyXG4gICMgQHJldHVybnMge0Jvb2xlYW59XHJcbiAgIyMjXHJcbiAgQGhhc093blByb3A6IChvYmosIGtleSkgLT5cclxuICAgIHt9Lmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXHJcblxyXG4gICMjI1xyXG4gICMgUmV0dXJucyB0cnVlIGlmZiBgb2JqYCBjb250YWlucyBga2V5YCwgaW5jbHVkaW5nIHZpYSB0aGUgcHJvdG90eXBlIGNoYWluLlxyXG4gICNcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xpbnRlZ2VyfSBrZXlcclxuICAjIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICMjI1xyXG4gIEBoYXNQcm9wOiAob2JqLCBrZXkpIC0+XHJcbiAgICBrZXkgb2Ygb2JqXHJcblxyXG4gICMjI1xyXG4gICMgQ2FsbGJhY2sgdXNlZCB0byByZXRyaWV2ZSBhIHByb3BlcnR5IGZyb20gYW4gb2JqZWN0XHJcbiAgI1xyXG4gICMgQGNhbGxiYWNrIGdldFByb3BcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xpbnRlZ2VyfSBrZXlcclxuICAjIEByZXR1cm5zIHsqfVxyXG4gICMjI1xyXG5cclxuICAjIyNcclxuICAjIEZpbmRzIHRoZSBnaXZlbiBga2V5YCBpbiBgb2JqYC5cclxuICAjXHJcbiAgIyBEZWZhdWx0IHZhbHVlIGZvciBgb3B0aW9ucy5nZXRQcm9wYC5cclxuICAjXHJcbiAgIyBAcGFyYW0geyp9IG9ialxyXG4gICMgQHBhcmFtIHtzdHJpbmd8aW50ZWdlcn0ga2V5XHJcbiAgIyBAcmV0dXJucyB7Kn1cclxuICAjIyNcclxuICBAZ2V0UHJvcDogKG9iaiwga2V5KSAtPlxyXG4gICAgb2JqW2tleV1cclxuXHJcbiAgIyMjXHJcbiAgIyBDYWxsYmFjayB1c2VkIHRvIHNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC5cclxuICAjXHJcbiAgIyBAY2FsbGJhY2sgc2V0UHJvcFxyXG4gICMgQHBhcmFtIHsqfSBvYmpcclxuICAjIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IGtleVxyXG4gICMgQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICMgQHJldHVybnMgeyp9XHJcbiAgIyMjXHJcblxyXG4gICMjI1xyXG4gICMgU2V0cyB0aGUgZ2l2ZW4gYGtleWAgaW4gYG9iamAgdG8gYHZhbHVlYC5cclxuICAjXHJcbiAgIyBEZWZhdWx0IHZhbHVlIGZvciBgb3B0aW9ucy5zZXRQcm9wYC5cclxuICAjXHJcbiAgIyBAcGFyYW0geyp9IG9ialxyXG4gICMgQHBhcmFtIHtzdHJpbmd8aW50ZWdlcn0ga2V5XHJcbiAgIyBAcGFyYW0geyp9IHZhbHVlXHJcbiAgIyBAcmV0dXJucyB7Kn0gYHZhbHVlYFxyXG4gICMjI1xyXG4gIEBzZXRQcm9wOiAob2JqLCBrZXksIHZhbHVlKSAtPlxyXG4gICAgb2JqW2tleV0gPSB2YWx1ZVxyXG5cclxuICAjIyNcclxuICAjIENhbGxiYWNrIHVzZWQgdG8gbW9kaWZ5IGJlaGF2aW91ciB3aGVuIGEgZ2l2ZW4gcGF0aCBzZWdtZW50IGNhbm5vdCBiZSBmb3VuZC5cclxuICAjXHJcbiAgIyBAY2FsbGJhY2sgbm90Rm91bmRcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xpbnRlZ2VyfSBrZXlcclxuICAjIEByZXR1cm5zIHsqfVxyXG4gICMjI1xyXG5cclxuICAjIyNcclxuICAjIFJldHVybnMgdGhlIHZhbHVlIHRvIHVzZSB3aGVuIGAuZ2V0YCBmYWlscyB0byBsb2NhdGUgYSBwb2ludGVyIHNlZ21lbnQuXHJcbiAgI1xyXG4gICMgRGVmYXVsdCB2YWx1ZSBmb3IgYG9wdGlvbnMuZ2V0Tm90Rm91bmRgLlxyXG4gICNcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xpbnRlZ2VyfSBzZWdtZW50XHJcbiAgIyBAcGFyYW0geyp9IHJvb3RcclxuICAjIEBwYXJhbSB7c3RyaW5nW119IHNlZ21lbnRzXHJcbiAgIyBAcGFyYW0ge2ludGVnZXJ9IGlTZWdtZW50XHJcbiAgIyBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gICMjI1xyXG4gIEBnZXROb3RGb3VuZDogKG9iaiwgc2VnbWVudCwgcm9vdCwgc2VnbWVudHMsIGlTZWdtZW50KSAtPlxyXG4gICAgdW5kZWZpbmVkXHJcblxyXG4gICMjI1xyXG4gICMgUmV0dXJucyB0aGUgdmFsdWUgdG8gdXNlIHdoZW4gYC5zZXRgIGZhaWxzIHRvIGxvY2F0ZSBhIHBvaW50ZXIgc2VnbWVudC5cclxuICAjXHJcbiAgIyBEZWZhdWx0IHZhbHVlIGZvciBgb3B0aW9ucy5zZXROb3RGb3VuZGAuXHJcbiAgI1xyXG4gICMgQHBhcmFtIHsqfSBvYmpcclxuICAjIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IHNlZ21lbnRcclxuICAjIEBwYXJhbSB7Kn0gcm9vdFxyXG4gICMgQHBhcmFtIHtzdHJpbmdbXX0gc2VnbWVudHNcclxuICAjIEBwYXJhbSB7aW50ZWdlcn0gaVNlZ21lbnRcclxuICAjIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAgIyMjXHJcbiAgQHNldE5vdEZvdW5kOiAob2JqLCBzZWdtZW50LCByb290LCBzZWdtZW50cywgaVNlZ21lbnQpIC0+XHJcbiAgICBpZiBzZWdtZW50c1tpU2VnbWVudCArIDFdLm1hdGNoKC9eKD86MHxbMS05XVxcZCp8LSkkLylcclxuICAgICAgcmV0dXJuIG9ialtzZWdtZW50XSA9IFtdXHJcbiAgICBlbHNlXHJcbiAgICAgIHJldHVybiBvYmpbc2VnbWVudF0gPSB7fVxyXG5cclxuICAjIyNcclxuICAjIFBlcmZvcm1zIGFuIGFjdGlvbiB3aGVuIGAuZGVsYCBmYWlscyB0byBsb2NhdGUgYSBwb2ludGVyIHNlZ21lbnQuXHJcbiAgI1xyXG4gICMgRGVmYXVsdCB2YWx1ZSBmb3IgYG9wdGlvbnMuZGVsTm90Rm91bmRgLlxyXG4gICNcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xpbnRlZ2VyfSBzZWdtZW50XHJcbiAgIyBAcGFyYW0geyp9IHJvb3RcclxuICAjIEBwYXJhbSB7c3RyaW5nW119IHNlZ21lbnRzXHJcbiAgIyBAcGFyYW0ge2ludGVnZXJ9IGlTZWdtZW50XHJcbiAgIyBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gICMjI1xyXG4gIEBkZWxOb3RGb3VuZDogKG9iaiwgc2VnbWVudCwgcm9vdCwgc2VnbWVudHMsIGlTZWdtZW50KSAtPlxyXG4gICAgdW5kZWZpbmVkXHJcblxyXG4gICMjI1xyXG4gICMgUmFpc2VzIGEgSnNvblBvaW50ZXJFcnJvciB3aGVuIHRoZSBnaXZlbiBwb2ludGVyIHNlZ21lbnQgaXMgbm90IGZvdW5kLlxyXG4gICNcclxuICAjIE1heSBiZSB1c2VkIGluIHBsYWNlIG9mIHRoZSBhYm92ZSBtZXRob2RzIHZpYSB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIGAuLy5nZXQvLnNldC8uaGFzLy5kZWwvLnNpbXBsZUJpbmRgLlxyXG4gICNcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xpbnRlZ2VyfSBzZWdtZW50XHJcbiAgIyBAcGFyYW0geyp9IHJvb3RcclxuICAjIEBwYXJhbSB7c3RyaW5nW119IHNlZ21lbnRzXHJcbiAgIyBAcGFyYW0ge2ludGVnZXJ9IGlTZWdtZW50XHJcbiAgIyBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gICMjI1xyXG4gIEBlcnJvck5vdEZvdW5kOiAob2JqLCBzZWdtZW50LCByb290LCBzZWdtZW50cywgaVNlZ21lbnQpIC0+XHJcbiAgICB0aHJvdyBuZXcgSnNvblBvaW50ZXJFcnJvcihcIlVuYWJsZSB0byBmaW5kIGpzb24gcGF0aDogI3tKc29uUG9pbnRlci5jb21waWxlKHNlZ21lbnRzLnNsaWNlKDAsIGlTZWdtZW50KzEpKX1cIilcclxuXHJcbiAgIyMjXHJcbiAgIyBTZXRzIHRoZSBsb2NhdGlvbiBpbiBgb2JqZWN0YCwgc3BlY2lmaWVkIGJ5IGBwb2ludGVyYCwgdG8gYHZhbHVlYC5cclxuICAjIElmIGBwb2ludGVyYCByZWZlcnMgdG8gdGhlIHdob2xlIGRvY3VtZW50LCBgdmFsdWVgIGlzIHJldHVybmVkIHdpdGhvdXQgbW9kaWZ5aW5nIGBvYmplY3RgLFxyXG4gICMgb3RoZXJ3aXNlLCBgb2JqZWN0YCBtb2RpZmllZCBhbmQgcmV0dXJuZWQuXHJcbiAgI1xyXG4gICMgQnkgZGVmYXVsdCwgaWYgYW55IGxvY2F0aW9uIHNwZWNpZmllZCBieSBgcG9pbnRlcmAgZG9lcyBub3QgZXhpc3QsIHRoZSBsb2NhdGlvbiBpcyBjcmVhdGVkIHVzaW5nIG9iamVjdHMgYW5kIGFycmF5cy5cclxuICAjIEFycmF5cyBhcmUgdXNlZCBvbmx5IHdoZW4gdGhlIGltbWVkaWF0ZWx5IGZvbGxvd2luZyBwYXRoIHNlZ21lbnQgaXMgYW4gYXJyYXkgZWxlbWVudCBhcyBkZWZpbmVkIGJ5IHRoZSBzdGFuZGFyZC5cclxuICAjXHJcbiAgIyBAcGFyYW0geyp9IG9ialxyXG4gICMgQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBvaW50ZXJcclxuICAjIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAgIyBAcGFyYW0ge2hhc1Byb3B9IG9wdGlvbnMuaGFzUHJvcFxyXG4gICMgQHBhcmFtIHtnZXRQcm9wfSBvcHRpb25zLmdldFByb3BcclxuICAjIEBwYXJhbSB7c2V0UHJvcH0gb3B0aW9ucy5zZXRQcm9wXHJcbiAgIyBAcGFyYW0ge25vdEZvdW5kfSBvcHRpb25zLmdldE5vdEZvdW5kXHJcbiAgIyBAcmV0dXJucyB7Kn1cclxuICAjIyNcclxuICBAc2V0OiAob2JqLCBwb2ludGVyLCB2YWx1ZSwgb3B0aW9ucykgLT5cclxuICAgIGlmIHR5cGVvZiBwb2ludGVyID09ICdzdHJpbmcnXHJcbiAgICAgIHBvaW50ZXIgPSBKc29uUG9pbnRlci5wYXJzZShwb2ludGVyKVxyXG5cclxuICAgIGlmIHBvaW50ZXIubGVuZ3RoID09IDBcclxuICAgICAgcmV0dXJuIHZhbHVlXHJcblxyXG4gICAgaGFzUHJvcCA9IG9wdGlvbnM/Lmhhc1Byb3AgPyBKc29uUG9pbnRlci5oYXNKc29uUHJvcFxyXG4gICAgZ2V0UHJvcCA9IG9wdGlvbnM/LmdldFByb3AgPyBKc29uUG9pbnRlci5nZXRQcm9wXHJcbiAgICBzZXRQcm9wID0gb3B0aW9ucz8uc2V0UHJvcCA/IEpzb25Qb2ludGVyLnNldFByb3BcclxuICAgIHNldE5vdEZvdW5kID0gb3B0aW9ucz8uc2V0Tm90Rm91bmQgPyBKc29uUG9pbnRlci5zZXROb3RGb3VuZFxyXG5cclxuICAgIHJvb3QgPSBvYmpcclxuICAgIGlTZWdtZW50ID0gMFxyXG4gICAgbGVuID0gcG9pbnRlci5sZW5ndGhcclxuXHJcbiAgICB3aGlsZSBpU2VnbWVudCAhPSBsZW5cclxuICAgICAgc2VnbWVudCA9IHBvaW50ZXJbaVNlZ21lbnRdXHJcbiAgICAgICsraVNlZ21lbnRcclxuXHJcbiAgICAgIGlmIHNlZ21lbnQgPT0gJy0nIGFuZCBBcnJheS5pc0FycmF5KG9iailcclxuICAgICAgICBzZWdtZW50ID0gb2JqLmxlbmd0aFxyXG4gICAgICBlbHNlIGlmIHNlZ21lbnQubWF0Y2goL14oPzowfFsxLTldXFxkKikkLykgYW5kIEFycmF5LmlzQXJyYXkob2JqKVxyXG4gICAgICAgIHNlZ21lbnQgPSBwYXJzZUludChzZWdtZW50LCAxMClcclxuXHJcbiAgICAgIGlmIGlTZWdtZW50ID09IGxlblxyXG4gICAgICAgIHNldFByb3Aob2JqLCBzZWdtZW50LCB2YWx1ZSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBlbHNlIGlmIG5vdCBoYXNQcm9wKG9iaiwgc2VnbWVudClcclxuICAgICAgICBvYmogPSBzZXROb3RGb3VuZChvYmosIHNlZ21lbnQsIHJvb3QsIHBvaW50ZXIsIGlTZWdtZW50IC0gMSlcclxuICAgICAgZWxzZVxyXG4gICAgICAgIG9iaiA9IGdldFByb3Aob2JqLCBzZWdtZW50KVxyXG5cclxuICAgIHJldHVybiByb290XHJcblxyXG4gICMjI1xyXG4gICMgRmluZHMgdGhlIHZhbHVlIGluIGBvYmpgIGFzIHNwZWNpZmllZCBieSBgcG9pbnRlcmBcclxuICAjXHJcbiAgIyBCeSBkZWZhdWx0LCByZXR1cm5zIHVuZGVmaW5lZCBmb3IgdmFsdWVzIHdoaWNoIGNhbm5vdCBiZSBmb3VuZFxyXG4gICNcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcG9pbnRlclxyXG4gICMgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAjIEBwYXJhbSB7aGFzUHJvcH0gb3B0aW9ucy5oYXNQcm9wXHJcbiAgIyBAcGFyYW0ge2dldFByb3B9IG9wdGlvbnMuZ2V0UHJvcFxyXG4gICMgQHBhcmFtIHtub3RGb3VuZH0gb3B0aW9ucy5nZXROb3RGb3VuZFxyXG4gICMgQHJldHVybnMgeyp9XHJcbiAgIyMjXHJcbiAgQGdldDogKG9iaiwgcG9pbnRlciwgb3B0aW9ucykgLT5cclxuICAgIGlmIHR5cGVvZiBwb2ludGVyID09ICdzdHJpbmcnXHJcbiAgICAgIHBvaW50ZXIgPSBKc29uUG9pbnRlci5wYXJzZShwb2ludGVyKVxyXG5cclxuICAgIGhhc1Byb3AgPSBvcHRpb25zPy5oYXNQcm9wID8gSnNvblBvaW50ZXIuaGFzSnNvblByb3BcclxuICAgIGdldFByb3AgPSBvcHRpb25zPy5nZXRQcm9wID8gSnNvblBvaW50ZXIuZ2V0UHJvcFxyXG4gICAgZ2V0Tm90Rm91bmQgPSBvcHRpb25zPy5nZXROb3RGb3VuZCA/IEpzb25Qb2ludGVyLmdldE5vdEZvdW5kXHJcblxyXG4gICAgcm9vdCA9IG9ialxyXG4gICAgaVNlZ21lbnQgPSAwXHJcbiAgICBsZW4gPSBwb2ludGVyLmxlbmd0aFxyXG4gICAgd2hpbGUgaVNlZ21lbnQgIT0gbGVuXHJcbiAgICAgIHNlZ21lbnQgPSBwb2ludGVyW2lTZWdtZW50XVxyXG4gICAgICArK2lTZWdtZW50XHJcblxyXG4gICAgICBpZiBzZWdtZW50ID09ICctJyBhbmQgQXJyYXkuaXNBcnJheShvYmopXHJcbiAgICAgICAgc2VnbWVudCA9IG9iai5sZW5ndGhcclxuICAgICAgZWxzZSBpZiBzZWdtZW50Lm1hdGNoKC9eKD86MHxbMS05XVxcZCopJC8pIGFuZCBBcnJheS5pc0FycmF5KG9iailcclxuICAgICAgICBzZWdtZW50ID0gcGFyc2VJbnQoc2VnbWVudCwgMTApXHJcblxyXG4gICAgICBpZiBub3QgaGFzUHJvcChvYmosIHNlZ21lbnQpXHJcbiAgICAgICAgcmV0dXJuIGdldE5vdEZvdW5kKG9iaiwgc2VnbWVudCwgcm9vdCwgcG9pbnRlciwgaVNlZ21lbnQgLSAxKVxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgb2JqID0gZ2V0UHJvcChvYmosIHNlZ21lbnQpXHJcblxyXG4gICAgcmV0dXJuIG9ialxyXG5cclxuICAjIyNcclxuICAjIFJlbW92ZXMgdGhlIGxvY2F0aW9uLCBzcGVjaWZpZWQgYnkgYHBvaW50ZXJgLCBmcm9tIGBvYmplY3RgLlxyXG4gICMgUmV0dXJucyB0aGUgbW9kaWZpZWQgYG9iamVjdGAsIG9yIHVuZGVmaW5lZCBpZiB0aGUgYHBvaW50ZXJgIGlzIGVtcHR5LlxyXG4gICNcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcG9pbnRlclxyXG4gICMgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAjIEBwYXJhbSB7aGFzUHJvcH0gb3B0aW9ucy5oYXNQcm9wXHJcbiAgIyBAcGFyYW0ge2dldFByb3B9IG9wdGlvbnMuZ2V0UHJvcFxyXG4gICMgQHBhcmFtIHtub3RGb3VuZH0gb3B0aW9ucy5kZWxOb3RGb3VuZFxyXG4gICMgQHJldHVybnMgeyp9XHJcbiAgIyMjXHJcbiAgQGRlbDogKG9iaiwgcG9pbnRlciwgb3B0aW9ucykgLT5cclxuICAgIGlmIHR5cGVvZiBwb2ludGVyID09ICdzdHJpbmcnXHJcbiAgICAgIHBvaW50ZXIgPSBKc29uUG9pbnRlci5wYXJzZShwb2ludGVyKVxyXG5cclxuICAgIGlmIHBvaW50ZXIubGVuZ3RoID09IDBcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxyXG5cclxuICAgIGhhc1Byb3AgPSBvcHRpb25zPy5oYXNQcm9wID8gSnNvblBvaW50ZXIuaGFzSnNvblByb3BcclxuICAgIGdldFByb3AgPSBvcHRpb25zPy5nZXRQcm9wID8gSnNvblBvaW50ZXIuZ2V0UHJvcFxyXG4gICAgZGVsTm90Rm91bmQgPSBvcHRpb25zPy5kZWxOb3RGb3VuZCA/IEpzb25Qb2ludGVyLmRlbE5vdEZvdW5kXHJcblxyXG4gICAgcm9vdCA9IG9ialxyXG4gICAgaVNlZ21lbnQgPSAwXHJcbiAgICBsZW4gPSBwb2ludGVyLmxlbmd0aFxyXG4gICAgd2hpbGUgaVNlZ21lbnQgIT0gbGVuXHJcbiAgICAgIHNlZ21lbnQgPSBwb2ludGVyW2lTZWdtZW50XVxyXG4gICAgICArK2lTZWdtZW50XHJcblxyXG4gICAgICBpZiBzZWdtZW50ID09ICctJyBhbmQgQXJyYXkuaXNBcnJheShvYmopXHJcbiAgICAgICAgc2VnbWVudCA9IG9iai5sZW5ndGhcclxuICAgICAgZWxzZSBpZiBzZWdtZW50Lm1hdGNoKC9eKD86MHxbMS05XVxcZCopJC8pIGFuZCBBcnJheS5pc0FycmF5KG9iailcclxuICAgICAgICBzZWdtZW50ID0gcGFyc2VJbnQoc2VnbWVudCwgMTApXHJcblxyXG4gICAgICBpZiBub3QgaGFzUHJvcChvYmosIHNlZ21lbnQpXHJcbiAgICAgICAgZGVsTm90Rm91bmQob2JqLCBzZWdtZW50LCByb290LCBwb2ludGVyLCBpU2VnbWVudCAtIDEpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgZWxzZSBpZiBpU2VnbWVudCA9PSBsZW5cclxuICAgICAgICBkZWxldGUgb2JqW3NlZ21lbnRdXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIG9iaiA9IGdldFByb3Aob2JqLCBzZWdtZW50KVxyXG5cclxuICAgIHJldHVybiByb290XHJcblxyXG4gICMjI1xyXG4gICMgUmV0dXJucyB0cnVlIGlmZiB0aGUgbG9jYXRpb24sIHNwZWNpZmllZCBieSBgcG9pbnRlcmAsIGV4aXN0cyBpbiBgb2JqZWN0YFxyXG4gICNcclxuICAjIEBwYXJhbSB7Kn0gb2JqXHJcbiAgIyBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcG9pbnRlclxyXG4gICMgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAjIEBwYXJhbSB7aGFzUHJvcH0gb3B0aW9ucy5oYXNQcm9wXHJcbiAgIyBAcGFyYW0ge2dldFByb3B9IG9wdGlvbnMuZ2V0UHJvcFxyXG4gICMgQHJldHVybnMgeyp9XHJcbiAgIyMjXHJcbiAgQGhhczogKG9iaiwgcG9pbnRlciwgb3B0aW9ucykgLT5cclxuICAgIGlmIHR5cGVvZiBwb2ludGVyID09ICdzdHJpbmcnXHJcbiAgICAgIHBvaW50ZXIgPSBKc29uUG9pbnRlci5wYXJzZShwb2ludGVyKVxyXG5cclxuICAgIGhhc1Byb3AgPSBvcHRpb25zPy5oYXNQcm9wID8gSnNvblBvaW50ZXIuaGFzSnNvblByb3BcclxuICAgIGdldFByb3AgPSBvcHRpb25zPy5nZXRQcm9wID8gSnNvblBvaW50ZXIuZ2V0UHJvcFxyXG5cclxuICAgIGlTZWdtZW50ID0gMFxyXG4gICAgbGVuID0gcG9pbnRlci5sZW5ndGhcclxuICAgIHdoaWxlIGlTZWdtZW50ICE9IGxlblxyXG4gICAgICBzZWdtZW50ID0gcG9pbnRlcltpU2VnbWVudF1cclxuICAgICAgKytpU2VnbWVudFxyXG5cclxuICAgICAgaWYgc2VnbWVudCA9PSAnLScgYW5kIEFycmF5LmlzQXJyYXkob2JqKVxyXG4gICAgICAgIHNlZ21lbnQgPSBvYmoubGVuZ3RoXHJcbiAgICAgIGVsc2UgaWYgc2VnbWVudC5tYXRjaCgvXig/OjB8WzEtOV1cXGQqKSQvKSBhbmQgQXJyYXkuaXNBcnJheShvYmopXHJcbiAgICAgICAgc2VnbWVudCA9IHBhcnNlSW50KHNlZ21lbnQsIDEwKVxyXG5cclxuICAgICAgaWYgbm90IGhhc1Byb3Aob2JqLCBzZWdtZW50KVxyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG5cclxuICAgICAgb2JqID0gZ2V0UHJvcChvYmosIHNlZ21lbnQpXHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9