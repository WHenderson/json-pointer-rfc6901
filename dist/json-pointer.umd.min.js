!function(t,n){"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?module.exports=n():t.JSON.pointer=n()}(this,function(){var t,n,e=function(t,n){function e(){this.constructor=t}for(var u in n)r.call(n,u)&&(t[u]=n[u]);return e.prototype=n.prototype,t.prototype=new e,t.__super__=n.prototype,t},r={}.hasOwnProperty;return n=function(t){function n(t){var e;e=n.__super__.constructor.call(this,t),this.message=e.message,this.stack=e.stack,this.name=this.constructor.name}return e(n,t),n}(Error),t=function(){function t(n,e,r){switch(arguments.length){case 3:return t.set(n,e,r);case 2:return t.get(n,e);case 1:return t.smartBind({object:n});default:return null}}return t.JsonPointerError=n,t.smartBind=function(n){var e,u,o,s,a,i,l,c,f,p,g;if(c=n.object,p=n.pointer,u=n.fragment,f=n.options,p=null!=u?u:p,o=void 0!==c,a=null!=p,s=null!=f,"string"==typeof p&&(p=this.parse(p)),l=function(t){var n,e,r,u,o,s,a;return null==t&&(t={}),n={},n.hasOwnProp=null!=(e=t.hasOwnProp)?e:f.hasOwnProp,n.getProp=null!=(r=t.getProp)?r:f.getProp,n.setProp=null!=(u=t.setProp)?u:f.setProp,n.getNotFound=null!=(o=t.getNotFound)?o:f.getNotFound,n.setNotFound=null!=(s=t.setNotFound)?s:f.setNotFound,n.delNotFound=null!=(a=t.delNotFound)?a:f.delNotFound,n},e=void 0,o&&a&&s)e=function(n){switch(arguments.length){case 1:return t.set(c,p,n,f);case 0:return t.get(c,p,f);default:return null}},e.set=function(n,e){return c=t.set(c,p,n,l(e))},e.get=function(n){return t.get(c,p,l(n))},e.has=function(n){return t.has(c,p,l(n))},e.del=function(n){return c=t.del(c,p,l(n))};else if(o&&a)e=function(n){switch(arguments.length){case 1:return t.set(c,p,n);case 0:return t.get(c,p);default:return null}},e.set=function(n,e){return c=t.set(c,p,n,e)},e.get=function(n){return t.get(c,p,n)},e.has=function(n){return t.has(c,p,n)},e.del=function(n){return c=t.del(c,p,n)};else if(o&&s)e=function(n,e){switch(arguments.length){case 2:return t.set(c,n,e,f);case 1:return t.get(c,n,f);default:return null}},e.set=function(n,e,r){return c=t.set(c,n,e,l(r))},e.get=function(n,e){return t.get(c,n,l(e))},e.has=function(n,e){return t.has(c,n,l(e))},e.del=function(n,e){return c=t.del(c,n,l(e))};else if(a&&s)e=function(n,e){switch(arguments.length){case 2:return t.set(n,p,e,f);case 1:return t.get(n,p,f);default:return null}},e.set=function(n,e,r){return t.set(n,p,e,l(r))},e.get=function(n,e){return t.get(n,p,l(e))},e.has=function(n,e){return t.has(n,p,l(e))},e.del=function(n,e){return t.del(n,p,l(e))};else if(s)e=function(n,r,u){switch(arguments.length){case 3:return t.set(n,r,u,f);case 2:return t.get(n,r,f);case 1:return e.smartBind({object:n});default:return null}},e.set=function(n,e,r,u){return t.set(n,e,r,l(u))},e.get=function(n,e,r){return t.get(n,e,l(r))},e.has=function(n,e,r){return t.has(n,e,l(r))},e.del=function(n,e,r){return t.del(n,e,l(r))};else if(o)e=function(n,e){switch(arguments.length){case 2:return t.set(c,n,e);case 1:return t.get(c,n);default:return null}},e.set=function(n,e,r){return c=t.set(c,n,e,r)},e.get=function(n,e){return t.get(c,n,e)},e.has=function(n,e){return t.has(c,n,e)},e.del=function(n,e){return c=t.del(c,n,e)};else{if(!a)return this;e=function(n,e){switch(arguments.length){case 2:return t.set(n,p,e);case 1:return t.get(n,p);default:return null}},e.set=function(n,e,r){return t.set(n,p,e,r)},e.get=function(n,e){return t.get(n,p,e)},e.has=function(n,e){return t.has(n,p,e)},e.del=function(n,e){return t.del(n,p,e)}}e.smartBind=function(n){var e;return e={},{}.hasOwnProperty.call(n,"object")?e.object=n.object:o&&(e.object=c),{}.hasOwnProperty.call(n,"pointer")?e.pointer=n.pointer:a&&(e.pointer=p),{}.hasOwnProperty.call(n,"options")?e.options=l(n.options):o&&(e.options=f),t.smartBind(e)},a&&(e.pointer=function(n){return 0===arguments.length?t.compilePointer(p):p=t.parsePointer(n)},e.fragment=function(n){return 0===arguments.length?t.compileFragment(p):p=t.parseFragment(n)}),o&&(e.object=function(t){return 0===arguments.length?c:c=t}),s&&(e.options=function(t){return 0===arguments.length?f:f=t});for(i in t)r.call(t,i)&&(g=t[i],{}.hasOwnProperty.call(e,i)||(e[i]=g));return e},t.escape=function(t){return t.replace(/~/g,"~0").replace(/\//g,"~1")},t.escapeFragment=function(n){return encodeURIComponent(t.escape(n))},t.unescape=function(t){return t.replace(/~1/g,"/").replace(/~0/g,"~")},t.unescapeFragment=function(n){return t.unescape(decodeURIComponent(n))},t.isPointer=function(t){switch(t.charAt(0)){case"":return!0;case"/":return!0;default:return!1}},t.isFragment=function(t){switch(t.substring(0,2)){case"#":return!0;case"#/":return!0;default:return!1}},t.parse=function(e){switch(e.charAt(0)){case"":return[];case"/":return e.substring(1).split("/").map(t.unescape);case"#":switch(e.charAt(1)){case"":return[];case"/":return e.substring(2).split("/").map(t.unescapeFragment);default:throw new n("Invalid JSON fragment pointer: "+e)}break;default:throw new n("Invalid JSON pointer: "+e)}},t.parsePointer=function(e){switch(e.charAt(0)){case"":return[];case"/":return e.substring(1).split("/").map(t.unescape);default:throw new n("Invalid JSON pointer: "+e)}},t.parseFragment=function(e){switch(e.substring(0,2)){case"#":return[];case"#/":return e.substring(2).split("/").map(t.unescapeFragment);default:throw new n("Invalid JSON fragment pointer: "+e)}},t.compile=function(n){return n.map(function(n){return"/"+t.escape(n)}).join("")},t.compilePointer=function(n){return n.map(function(n){return"/"+t.escape(n)}).join("")},t.compileFragment=function(n){return"#"+n.map(function(n){return"/"+t.escapeFragment(n)}).join("")},t.hasJsonProp=function(t,n){return Array.isArray(t)?"number"==typeof n&&n<t.length:"object"==typeof t?{}.hasOwnProperty.call(t,n):!1},t.hasOwnProp=function(t,n){return{}.hasOwnProperty.call(t,n)},t.hasProp=function(t,n){return n in t},t.getProp=function(t,n){return t[n]},t.setProp=function(t,n,e){return t[n]=e},t.getNotFound=function(t,n,e,r,u){return void 0},t.setNotFound=function(t,n,e,r,u){return r[u+1].match(/^(?:0|[1-9]\d*|-)$/)?t[n]=[]:t[n]={}},t.delNotFound=function(t,n,e,r,u){return void 0},t.errorNotFound=function(e,r,u,o,s){throw new n("Unable to find json path: "+t.compile(o.slice(0,s+1)))},t.set=function(n,e,r,u){var o,s,a,i,l,c,f,p,g,h,d,m;if("string"==typeof e&&(e=t.parse(e)),0===e.length)return r;for(s=null!=(l=null!=u?u.hasProp:void 0)?l:t.hasJsonProp,o=null!=(c=null!=u?u.getProp:void 0)?c:t.getProp,m=null!=(f=null!=u?u.setProp:void 0)?f:t.setProp,d=null!=(p=null!=u?u.setNotFound:void 0)?p:t.setNotFound,g=n,a=0,i=e.length;a!==i;){if(h=e[a],++a,"-"===h&&Array.isArray(n)?h=n.length:h.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(h=parseInt(h,10)),a===i){m(n,h,r);break}n=s(n,h)?o(n,h):d(n,h,g,e,a-1)}return g},t.get=function(n,e,r){var u,o,s,a,i,l,c,f,p,g;for("string"==typeof e&&(e=t.parse(e)),s=null!=(l=null!=r?r.hasProp:void 0)?l:t.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:t.getProp,u=null!=(f=null!=r?r.getNotFound:void 0)?f:t.getNotFound,p=n,a=0,i=e.length;a!==i;){if(g=e[a],++a,"-"===g&&Array.isArray(n)?g=n.length:g.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(g=parseInt(g,10)),!s(n,g))return u(n,g,p,e,a-1);n=o(n,g)}return n},t.del=function(n,e,r){var u,o,s,a,i,l,c,f,p,g;if("string"==typeof e&&(e=t.parse(e)),0===e.length)return void 0;for(s=null!=(l=null!=r?r.hasProp:void 0)?l:t.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:t.getProp,u=null!=(f=null!=r?r.delNotFound:void 0)?f:t.delNotFound,p=n,a=0,i=e.length;a!==i;){if(g=e[a],++a,"-"===g&&Array.isArray(n)?g=n.length:g.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(g=parseInt(g,10)),!s(n,g)){u(n,g,p,e,a-1);break}if(a===i){delete n[g];break}n=o(n,g)}return p},t.has=function(n,e,r){var u,o,s,a,i,l,c;for("string"==typeof e&&(e=t.parse(e)),o=null!=(i=null!=r?r.hasProp:void 0)?i:t.hasJsonProp,u=null!=(l=null!=r?r.getProp:void 0)?l:t.getProp,s=0,a=e.length;s!==a;){if(c=e[s],++s,"-"===c&&Array.isArray(n)?c=n.length:c.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(n)&&(c=parseInt(c,10)),!o(n,c))return!1;n=u(n,c)}return!0},t}()});
//# sourceMappingURL=data:application/json;base64,